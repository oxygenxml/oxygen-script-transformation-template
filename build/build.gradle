task initTransformation() {
    doFirst {
        if (!new File("${projectDir}/extracted/oxygen/").exists()) {
            ant.get(src: 'https://www.oxygenxml.com/InstData/Editor/All/oxygen.tar.gz', dest: "${projectDir}/oxygen.tar.gz", skipexisting: 'true')
            ant.untar(src: "${projectDir}/oxygen.tar.gz", dest: "${projectDir}/extracted", compression: 'gzip')
            
            String key = System.getenv('SCRIPTING_LICENSE_KEY')
            if (key == null) {
                throw new TaskExecutionException(it, new Exception("You need a valid Oxygen Scripting license key."))
            } else {
                new File("${projectDir}/extracted/oxygen/scriptinglicensekey.txt").write(key.replaceAll("  ", "\n"))
            }
        }
    }
    doLast {
        project.exec {
            workingDir "${projectDir}/extracted/oxygen/scripts"
            commandLine 'chmod', '700', 'transform.sh'
        }
    }
}

task runTransformation(type: Exec, dependsOn: [initTransformation]) {
    workingDir "${projectDir}/extracted/oxygen"
    commandLine "${projectDir}/extracted/oxygen/scripts/transform.sh",
            "-i", "${projectDir}/../transform/" + inputFile,
            "-sn", scenarioName,
            "-s", "${projectDir}/../transformScript.xpr" 
   
    doLast {
        if (execResult.getExitValue() != 0) {
            println new File("${projectDir}/../transform/" + inputFile).text
            throw new TaskExecutionException(it, new Exception("Transformation failed, see task output for details."))
        } else {
            String parentInputDir = new File("${projectDir}/../transform/" + inputFile).getParent()
            project.exec {
                workingDir parentInputDir
                commandLine 'mv', 'out', '../../'
            }
        }        
    }
}

defaultTasks 'runTransformation'

